[buildout]
extends =
    ../versions/base.cfg
find-links =
    pypi-local/

extends-cache = cache
versions = versions
parts =
    solr-ini
    alembic
    alembic-ini
    dashboard-ini
    gunicorn
    html_notification_patch
    nginx.conf
    pyramid
    supervisor
    trac-admin
    trac-master-config
    upgrade_svnenvs
    upgrade_tracenvs
    var
    who-config
    auth_wsgi
eggs = 
    penelope.core
    ${trac:eggs}
    gunicorn
    PasteScript
    repoze.errorlog
show-picked-versions = true

[ports]
pyramid = 8080
pyramid1 = 8081
pyramid2 = 8082
apache_svn = 8083
nginx = 80
solr = 8983
mail = 25

[hosts]
pyramid = 127.0.0.1
pyramid1 = 127.0.0.1
pyramid2 = 127.0.0.1
apache_svn = 127.0.0.1
nginx = 0.0.0.0
solr = 127.0.0.1
mail = 127.0.0.1

[settings]
projectname = PenelopeLocal
domain = penelope.redturtle.it
google = redturtle.it
prefix = https
url = ${settings:prefix}://${settings:domain}
svnurl = ${settings:url}
includes =
karmaurl =
iteration_folder = PenelopeIterations
iteration_template = 
mail_host = ${hosts:mail}
mail_port = ${ports:mail}
mail_username =
mail_password =
mail_default_sender = 
solr = http://${hosts:solr}:${ports:solr}/solr/
sentry_dsn = 
ga_tracking_id = 
jdbc_url = 
jdbc_user = 
jdbc_password = 

###########
# Pyramid #
###########
[dashboard]
db_string = postgresql://postgres:postgres@localhost:5432/dashboard
db_echo = true

[alembic]
recipe = zc.recipe.egg
eggs =
    alembic
    penelope.core
initialization =
    sys.argv = sys.argv[:1] + ['-c', '${buildout:directory}/etc/alembic.ini'] + sys.argv[1:]

[alembic-ini]
recipe = collective.recipe.template[genshi]:genshi
input = ${buildout:directory}/templates/alembic.ini.in
output = ${buildout:directory}/etc/alembic.ini

[dashboard-ini]
recipe = collective.recipe.template[genshi]:genshi
input = ${buildout:directory}/templates/production.ini.in
output = ${buildout:directory}/etc/production.ini

[who-config]
recipe = collective.recipe.template[genshi]:genshi
input = ${buildout:directory}/templates/who.ini.in
output = ${buildout:directory}/etc/who.ini

[solr-ini]
recipe = collective.recipe.template[genshi]:genshi
input = ${buildout:directory}/templates/data-config.xml.in
output = ${buildout:directory}/etc/data-config.xml

[gunicorn]
recipe = zc.recipe.egg
scripts = gunicorn
eggs = ${buildout:eggs}
initialization =
    import os
    os.environ['PYTHONPATH'] = '' #because js.lesscss is broken
    os.environ['LESSC'] = '${buildout:directory}/parts/node/lib/node_modules/less'
    os.environ['LC_ALL'] = 'en_US.utf8'

[pyramid]
# the eggs part will install all dependencies and setup our application in
# development mode
recipe = zc.recipe.egg
initialization =
    import os
    os.environ['PYTHONPATH'] = '' #because js.lesscss is broken
    os.environ['LESSC'] = '${buildout:directory}/parts/node/lib/node_modules/less'
    os.environ['LC_ALL'] = 'en_US.utf8'
    from gevent import monkey; monkey.patch_all()
eggs =
    pyramid
    ${buildout:eggs}

########
# Trac #
########
[trac]
eggs =
    penelope.trac
    WSGITrac
    psycopg2
    lxml>=2.3
    TracUserManagerPlugin>=0.4
    AutocompleteUsers
    BatchModify
    TracHTTPAuth
    TracDragDrop
    TracSubTicketsPlugin
    TracPrivateTickets
    TracCustomFieldAdmin
    TracWysiwyg
    TracTicketRelationsPlugin
    FullTextSearchPlugin

[trac-admin]
recipe = zc.recipe.egg
eggs = 
    ${trac:eggs}
    Trac
scripts =
    trac-admin
initialization =
    import warnings
    warnings.filterwarnings('ignore', message='the md5 module is deprecated; use hashlib instead')
    warnings.filterwarnings('ignore', message='the sha module is deprecated; use the hashlib module instead')
    warnings.filterwarnings('ignore', message='compile_mappers\(\) is renamed to configure_mappers\(\)')
bin-directory = ${buildout:directory}/admin

[trac-master-config]
recipe = collective.recipe.template[genshi]:genshi
input = ${buildout:directory}/templates/trac.ini.in
output = ${buildout:directory}/etc/trac.ini

[upgrade_tracenvs]
recipe = collective.recipe.template[genshi]:genshi
input = ${buildout:directory}/templates/upgrade-tracenvs.in
output = ${buildout:directory}/bin/upgrade-tracenvs
mode = 755

[upgrade_svnenvs]
recipe = collective.recipe.template[genshi]:genshi
input = ${buildout:directory}/templates/upgrade-svnenvs.in
output = ${buildout:directory}/bin/upgrade-svnenvs
mode = 755

[var]
recipe = z3c.recipe.mkdir
paths = var/log

[auth_wsgi]
recipe = zc.recipe.egg
eggs = 
    penelope.trac
initialization =
    import os
    os.environ['POR_INI'] = "${dashboard-ini:output}"
    from penelope.trac.auth_wsgi import check_password; check_password

[html_notification_patch]
recipe = collective.recipe.patch
egg = Trac==0.12.4
patches = patches/notification.patch

################
#     SOLR     #
################

[solr-download]
recipe = hexagonit.recipe.download
strip-top-level-dir = true
url = http://archive.apache.org/dist/lucene/solr/4.9.0/solr-4.9.0.zip

[solr]
recipe = collective.recipe.solrinstance
solr-location = ${solr-download:location}
host = ${hosts:solr}
port = ${ports:solr}
section-name = SOLR
unique-key = uniqueID
index = name:uniqueID type:string indexed:true stored:true required:true
abortOnConfigurationError = true
additional-solrconfig = 
    <lib dir="${buildout:directory}/parts/solr/dist/" regex="solr-dataimporthandler-\d.*\.jar" />
    <lib dir="${buildout:directory}/parts/solr/dist/" regex="postgresql-\d.*\.jar" />
    <requestHandler name="/dataimport" class="org.apache.solr.handler.dataimport.DataImportHandler">
        <lst name="defaults">
            <str name="config">${buildout:directory}/parts/solr/solr/collection1/conf/data-config.xml</str>
        </lst>
    </requestHandler>


[solr-update]
recipe = collective.recipe.cmd
on_update = true
on_install = true
cmds =
    cp ${buildout:directory}/solr-dist/postgresql-9.3-1101.jdbc41.jar ${buildout:directory}/parts/solr/dist
#    cp ${buildout:directory}/templates/solrconfig.xml ${buildout:directory}/parts/solr/solr/conf
    cp ${buildout:directory}/templates/schema.xml ${buildout:directory}/parts/solr/solr/collection1/conf
    cp ${buildout:directory}/etc/data-config.xml ${buildout:directory}/parts/solr/solr/collection1/conf

##################
#     WSGI       #
##################

[mod_wsgi]
recipe = collective.recipe.modwsgi
eggs = 
    ${buildout:eggs}
    PasteDeploy
    Paste
    python-cjson
    nose
    plone.i18n
    ordereddict
    Unidecode
config-file = ${buildout:directory}/etc/production.ini
app_name = main

[apache]
user = www-data

[apache.conf]
recipe = collective.recipe.template[genshi]:genshi
input = ${buildout:directory}/templates/apache.conf.in
output = ${buildout:directory}/etc/apache.conf

[nginx.conf]
recipe = collective.recipe.template[genshi]:genshi
input = ${buildout:directory}/templates/nginx.conf.in
output = ${buildout:directory}/etc/nginx.conf

[fixperms]
recipe = plone.recipe.command
command = chown -R ${apache:user}:${apache:user} ${buildout:directory}
update-command = ${fixperms:command}

####################
#     SUPERVISOR   #
####################

[supervisor]
recipe = collective.recipe.supervisor
http-socket = unix
user = admin
password = admin
file = ${buildout:directory}/var/supervisor.sock
supervisord-user =
programs =
    20 gunicorn ${buildout:directory}/bin/gunicorn [-b ${hosts:pyramid1}:${ports:pyramid1} --workers=2 --timeout=60 --access-logfile=${buildout:directory}/var/log/gunicorn1.log --error-logfile=${buildout:directory}/var/log/error-gunicorn1.log wsgi:application] ${buildout:directory}
    20 gunicorn_socketio ${buildout:directory}/bin/gunicorn [-b ${hosts:pyramid2}:${ports:pyramid2} --workers=1 --access-logfile=${buildout:directory}/var/log/gunicorn2.log --error-logfile=${buildout:directory}/var/log/error-gunicorn2.log --worker-class socketio.sgunicorn.NginxGeventSocketIOWorker wsgi:application] ${buildout:directory}
    30 solr ${buildout:directory}/bin/solr-instance [fg]
